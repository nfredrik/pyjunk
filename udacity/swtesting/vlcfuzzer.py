#!usr/bin/python

#
# Chapter 3-27
# Example of a mutation-based random-testing.
# Inputs are generated by modifying, non-randomly generated inputs, like
# pdf, docs, text files? or could it be other stuff? check out..

#
#
############ constants

apps = ["/Applications/LibreOffice.app/Contents/MacOS/soffice.bin"]
          
#apps = ["/Applications/Opera.app/Contents/MacOS/Opera"   ]

file_list = ["test.doc"]

fuzz_output = "/Users/frsv/Documents/workspace/pyjunk/udacity/swtesting/fuzzed.doc"

FuzzFactor = 250
num_tests = 1
############# code

import math
import random
import string
import subprocess
import time
num_craches = 0

for i in range(num_tests):
  file_choice = random.choice(file_list)
  app = random.choice(apps)

  buf = bytearray(open(file_choice, 'rb').read())

  numwrites = random.randrange(math.ceil((float(len(buf)) / FuzzFactor)))+1

  for j in range(numwrites):
    rbyte = random.randrange(256)
    rn = random.randrange(len(buf))
    buf[rn] = "%c" % (rbyte)

  open(fuzz_output, 'wb').write(buf)

  print 'j:',j
  
  process = subprocess.Popen([app, fuzz_output])

  time.sleep(10)
  crashed = process.poll()

  if not crashed:
    process.terminate()
  else:
    num_crashes = num_crashes + 1
    print "Crash# " + str(num_crashes) + " for fuzzed file " + file_choice
    log_crash_fname = "crashed_fuzzfile_" + str(num_crashes) + ".cir"
    open(log_crash_fname,'wb').write(buf)
    