#!/usr/bin/env python

import os
import sys
import getpass
import signal
import sys
from pwd import getpwnam


# TODO:
#  remove baseline when making pick 2

#-----------------------------------------------------------------------------------

DEPLOYED='/srv/utv/so_baseline'
LATEST_NITE='/srv/utv/so/baseline'
NITES='/srv/utv/so/'
USERPATH='/srv/utv/devenvs/' + os.getenv('LOGNAME') + '/us/cobol/so_baseline'
#-----------------------------------------------------------------------------------
def error_exit():
    print 'You declined no symbolic link  will be set'
    sys.exit(1)


#-----------------------------------------------------------------------------------
def splitpath(path, maxdepth=20):
     ( head, tail ) = os.path.split(path)
     return splitpath(head, maxdepth - 1) + [ tail ] \
         if maxdepth and head and head != path \
         else [ head or tail ]
#-----------------------------------------------------------------------------------
def signal_handler(signal, frame):
    error_exit()

#-----------------------------------------------------------------------------------
def wait_4_sel(list):

    while True:
        ff = raw_input(' ')

        if ff == 'q':
            error_exit()

        if ff in list:
            return ff
        else:
            print 'not an alternative, try again or q for quit'

#-----------------------------------------------------------------------------------
def set_symlink(source, dest):

    print 'Making symlink, source:',source,' dest:', dest

    # Remove old link before setting new one
    os.unlink(dest)
    try:
        os.symlink(source, dest) 
    except NameError as e:
        print 'Failed to set the release to approved, problems with permissions?', 'red'
        print "Name error({0}): {1}".format(e.errno, e.strerror)
        print
        sys.exit(1)

#-----------------------------------------------------------------------------------
def filter(lst):
    r_list=[]
    for item in lst:
        if item.find('baseline') == -1:
            r_list.append(item)
 
    return r_list
#-----------------------------------------------------------------------------------
def main():

    signal.signal(signal.SIGINT, signal_handler)

    print 'Your baseline now:' , splitpath(os.path.realpath(USERPATH))[4]
    print 'Pick baseline',
    print
    print '0 - Latest Deployed baseline:', splitpath(os.path.realpath(USERPATH))[4]
    print '1 - Latest Nightly built baseline:',splitpath(os.path.realpath(LATEST_NITE))[4]
    print '2 - Older Nightly built baselines' 
    print 'q - quit'
    sel = wait_4_sel(['0','1','2'])

    # Read from directory with release directories, exclude already approved releases
    if sel == '0':
        set_symlink(DEPLOYED, USERPATH)
    elif sel == '1':
        set_symlink(LATEST_NITE, USERPATH)
    elif sel == '2':
        lst = filter(os.listdir(NITES))

        cntr = 0
        for i in lst:
            print cntr,' -', i
            cntr+=1

        choice = wait_4_sel([str(x) for x in range(0,len(lst))])
        source = NITES + lst[int(choice)]
        set_symlink(source, USERPATH)
    else:
       print 'Wrong pick, leaving ...'

    sys.exit(0)

    # We go here only if the user declined
    error_exit()

if __name__ == '__main__':
  main()
